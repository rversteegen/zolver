### Instruction

Please directly translate the following maths problem statement into code for the CASconstraint constraint-solving computer algebra system (CAS). CASconstraint syntax is very similar to python, sympy and z3. Use the following rules and "math → code" syntax lookup tables to translate.

[NOTE] An expression is any formula such as "x * y" or "count([x], min(x))". An expression can include unknowns. 
Unknown variables must be declared with type annotations before they are used. Choose appropriate variable names, single letters aren't necessary.

Known quantities can be named as variables using "=" without a type annotation.
[BLOCK] comb or prob
For example to create an enumeration of 3 colors as constants 0, 1, 2:
```
red, green, blue = range(3)
```
[ELSE]
For example to store a constant:
```
cards = 29
```
[BLOCK]

• comment → # comment
• create a new temporary variable (not an unknown) expr from for → a == b
• x is an integer unknown → x : Int
• x is a real unknown → x : Real  %% Including rationals
• proposition p is a constraint → p  %% On a line by itself
• x is positive → x > 0
• two expressions are equal, a = b → a == b
• multiplication and exponentiation, e.g. $2s^2(t+1)$ → 2*s^2 * (t+1)  %% * must be used
[BLOCK] complex
• x is a complex unknown → x : Complex
• the imaginary unit i → I
• complex number a + bi → a + b * I
• real part of z∈ℂ → Re(z)
• imaginary part of z∈ℂ → Im(z)
• magnitude of complex x → abs(x)
[BLOCK]
• absolute value of real x → abs(x)
• ∞ → oo
• the answer is; the expression e to solve for → goal = e  %% Mandatory

ALL translations MUST include a line "goal = ..."!

Functions either have closed form equations, or are unknown. Known functions are defined using Lambda, and don't need a type annotation:
```
x : Real  # We need an unknown variable to use inside Lambda
f = Lambda(x, sin(2*x))
```
Unknown functions must be declared using "f : Function(...)", and constraints on them are given using ForAll:
```
f : Function([Int], Real)  # From Int to Real
# f is an odd function
ForAll(f(x) == -f(-x) for x in Int)  # x is a new bound variable
```

Sequences, lists, and functions with integer domain (one arg of type Int) are the same thing and interchangeable.

[BLOCK] graphs
• h is an real-valued function with two args of type T1, T2 → h : Function([T1, T1], Real)
• define the function circ(x, y) = x^2 + y^2 → x, y : Real ; circ = Lambda((x, y), x^2 + y^2)
• the derivative of an expression or function e wrt x → e.diff(x)  %% x must be declared
[BLOCK]
• x is an unbounded sequence of reals → x : Seq(Real)   %% Equivalent to "x : Function([Int], Real)
• the length of a sequence q → len(q)  %% If q is infinite, len(q) = oo
• an element x_i of x → x[i]   %% Equal to 0 if i >= len(x)
• x is an unbounded unknown sequence of integers → x : Seq(Int)
• x is a length n unknown sequence of integers, x_0, x_1, …, x_{n-1}  → x : Seq(Int, len = n)
• the sequence of integers 4, …, 6 → range(4, 7)
[BLOCK] seqs relations or combs
• {x_i} is a sequence of integers for i ∈ 1, …, 32 → x : Seq(Real, start = 1, len = 32)
• the sequence of integers 0, …, 9 → seq(0, 9)
• list/sequence of two values x, y → [x, y]
• the reversal of a finite sequence/list s → reversed(s)
[BLOCK] seqs or ntheory
• the sequence of digits of x in base b, starting with units at index 0 → digits(x, b)  %% E.g. digits(x, b) == x % b
[BLOCK]

The argument to "set, seq, sum, product, or argmax" can be a list comprehension ranging over a sequence or finite or infinite set (such as Int, Real, Complex, etc). For example "sum(x^2 for x in c)".

ForAll, Exists
, including all reals bound/index variables: , Set, Sum
But these functions don't: set, sum, product).


A proposition is any expression with a boolean value, such as "a > 2 and" or "is_prime(x)".
• p and q → p and q
• p or q → p or q
• p if and only if q → p == q
• p implies q → Implies(p, q)
• if p then the value a else value b → If(p, a, b)   %% A simple piecewise function
• the expression "f_1 if p_1, else f_2 if p_2, else f_3" → Piecewise((f_1, p_1), (f_2, p_2), (f3, True))

Use ForAll and Exists to put constraints on sequences, for example the Fibonacci sequence:
```
fib : Seq(Int)
fib[1] == fib[2] == 1
i : Int
ForAll([i >= 3], fib[i] == fib[i - 1] + fib[i - 2])
```

• x ∈ S → x in S
• for every i ∈ S, p holds → ForAll(p for i in S)
• for all reals i and j, e holds → ForAll(e for i in Real for j in Real)
• sum of all elements of sequence/list L → sum(L)
• sum of all L_i for i > 2 → sum(L[i] for i in Int and i > 2)
• a series summation a_1 + a_2 + ... of sequence a → sum(a)
• P is a set of integers → P : Set(Int)
• the size of set S → count(S)  %% Equivalent to len(S)
• {x ∈ ℤ : p(x)}, the set of integers x such that p(x) → set(x for x in Int if p(x))
• the set {e : x ∈ S Λ p(x)} → set(e for x in S and p(x))
• the set of integer pairs {(x, y) | s.t. p(x, y)} → set([x, y] for x in Int for y in Int if p(x, y))
• the range of function f(x) on the closed interval [a, b] → set(f(x) for x in Real if a <= x <= b)
• the smallest element in set or sequence S → min(S)   %% max(S) is the largest
• all possible values of expression e given all constraints → set(e)
• the largest possible value of e → max(e)
• the number of possible values of e → count(e)
• the value x ∈ S for which f(x) attains the maximum → argmax(f(x) for x in S)

[BLOCK] ntheory or comb
Syntax lookup table:
• p is a factor of q → q % p == 0
• greatest common divisor of x and y → gcd(x, y)
• least common multiple of x and y → lcm(x, y)
• x! → factorial(x)
• x is a prime number → is_prime(x)
• number of combinations x choose y → comb(x, y)
• sum of numerator p and denominator q of a rational x written as p/q where gcd(p,q)=1 → sum(as_numer_denom(x))

[BLOCK] geometry
You can use standard sympy types and functions for geometry. The CAS extends these for solving for unknowns:
• p is an unknown point on the plane → p : Point   %% p has components p.x, p.y
• S is an unknown polygon on the plane → P : Polygon
• the polygon ABCD of points A, B, C, D → Polygon(A, B, C, D)  %% E.g. tri : Polygon ; tri = Polygon(base1, base2, peak)
• a polygon P is regular → is_regular(P)
• a regular polygon with N sides, center C, radius R (from center to vertices) → RegularPolygon(c = C, r = R, n = N)  %% All three arguments are optional, and can be unknown variables
• S is an unknown circle on the plane → S : Circle    %% S has components S.center, S.radius
• the circle with center c and radius r → Circle(c, r)
• the circle passing through 3 points → Circle(p1, p2, p3)
• a unknown straight line or segment AB → AB : Line
• the line between points A, B : Line(A, B)
• distance between points p1, p2 → distance(p1, p2)
• distance between the nearest points of two sets of points (individual Points or Lines, Circles, etc) → distance
• angle between lines AB, BC → angle(AB, BC)
• the set of all points on the perimeter of shape S → perimeter(P)

Angles are measured in radians
• 50 degrees → deg2rad(50)
• x radians to degress → rad2deg(x)

A polygon P has components P.area, P.vertices, P.centroid, P.angles, P.sides, P.perimeter. For example:
• area of polygon G → G.area
• the set of interior angles of polygon G → G.angles

[BLOCK] geometry linalg
Point and Vector(2) are the same and interchangeable.

[BLOCK] linalg
Types and functions for linear algebra are the same as sympy. For example:
• v is a vector of length n, optional type T (defaults to Real) → v : Vector(n, T)  %% E.g. Vector(2, Int), Vector(3)
• M is an n*m matrix, optional type T (defaults to Real) → M : Matrix(n, m, T)  %% E.g. Matrix(2, 2)
• the matrix with rows 0 3 and 1 7 → Matrix([[0, 3], [1, 7]])
• determinant of M → det(M)
[BLOCK] geometry linalg
• the image of a Point v under a Matrix M → M @ v
• the image of any shape (e.g. Line, Polygon) q under a 2x2 Matrix M → M @ q

[BLOCK]
Use comments starting with '#' to explain how your translated variables and constraints correspond to the problem statement BUT give a *direct* translation into the algebra system, don't try to solve the problem!
Make the translation as close as possible to the original English while following the correct syntax!
Put all the relevant information (needed to reach the answer) from the problem statement into your translation. So if a quantity or formula exists in the problem it should usually be in the translation!

Examples:

[BLOCK]
### Statement
"When the greatest common divisor and least common multiple of two integers are multiplied, the product is 180. How many different values could be the greatest common divisor of the two integers?"

STARTANSWER
# Name the two integers a and b
a, b : Int
gcd(a, b) * lcm(a, b) == 180
# The number of possible values of gcd(a, b):
goal = count(gcd(a, b))
ENDCODE

### Statement
"What is the first natural number after 42 that has a remainder of $5$ when divided by $7$?"

STARTANSWER
# Call this number 'a'
a : Int
a > 42
a % 7 == 5
# The first such number is the minimum of all possible assignments to 'a'
goal = min(a)
ENDCODE

[BLOCK] seqs or relations
### Statement
"A geometric sequence starts with $a_1 = 2$. If $a_4 = 6$ what is $a_9$?""

STARTANSWER
# In general, 'a' may contain real numbers
a : Seq(Real)
# A geometric sequence is defined by a[i] = r * a[i - 1]
r : Real
i : Int
ForAll([i > 1], a[i] == r * a[i - 1])
# Two elements of a are given
a[1] == 2
a[4] == 6
goal = a[9]
ENDCODE

[BLOCK]
### Statement
"Let $f(x) = 2x - c$ and $g(x, t) = $\frac{x + 1}{t - x}$ and $h(t) = g(h(t - 1), f(t))$. If $h(0) = 0$ what is $h(c)$?"

STARTANSWER
# c is an unknown parameter
c : Real
# The functions f and g have known equations (although parameter c is unknown), so we can use Lambda to define them
x : Real
f = Lambda(x, 2*x - c)
t : Real
g = Lambda((x, t), (x + 1) / (t - x))
# The function h is recurrent so its closed form isn't known. So we can't define it with Lambda but instead must declare an unknown function and use ForAll
h : Function([Real], Real)
ForAll([t], h(t) == g(h(t - 1), f(t)))
# h(0) is given
h(0) == 0
# Find h(c)
goal = h(c)
ENDCODE

[BLOCK] seqs or relations
### Statement
"The sum of the geometric series $-1 + 3 - 9 + 27 - \\cdots + k is -44287. What is k?"

STARTANSWER
# This is a finite geometric series of unknown length n. Call the sequence of terms s_1, ..., s_n
n : Int
s : Seq(Int, start = 1, len = n)
# s_1 = -1
s[1] == -1
# The common ratio of s is -3
ForAll([i > 1], s[i] == -1 * -3 ^ (i - 1))
# Find s[n]
goal = s[n]
ENDCODE

[BLOCK] complex
### Statement
"A complex number $x+yi$ has magnitude 2 when added to $3+4i$. What's the minimum possible value of $x + y$?"

STARTANSWER
# We can either use two Real variables x and y or a single Complex variable z = x+yi. A single variable is easier for arithmetic
z : Complex
abs(z + 3+4*I) == 2
# We want to minimize x + y
goal = min(Re(z) + Im(z))
ENDCODE

STARTANSWER
# Alternatively, we can use reals, and the magnitude of a complex number z is defined as sqrt(Re(z)^2 + Im(z)^2)
x : Real
y : Real
sqrt((x+3)^2 + (y+4)^2) == 2
goal = min(x + y)
ENDCODE

[BLOCK] graphs or complex
### Statement
"What is the sum of all values of $y$ for which the complex function $\frac{y+6}{y^2-5y+4}$ is undefined?"

STARTANSWER
# A fraction is undefined when the denominator is 0, so we need to solve y^2 - 5y + 4 = 0
y : Complex
y^2 - 5*y + 4 == 0
# Sum all solutions
goal = sum(y)
ENDCODE

[BLOCK] geometry
### Statement
"Two adjacent vertices of a regular hexagon are (3, 4) and (5, 6) and it encloses the origin. What is the distance from its center to the origin?"

STARTANSWER
# Declare the hexagon
hexagon : RegularPolygon(n = 6)
# Define the first and second vertices
Point(3, 4) == hexagon.vertices[0]
Point(5, 6) == hexagon.vertices[1]
origin : Point
origin == Point(0, 0)
hexagon.encloses(origin)
goal = distance(hexagon.center, origin)
ENDCODE

[BLOCK] ntheory or seqs
### Statement
"When the base-10 integers 200 and 1200 are expressed in base 2, how many more digits does 1200 have than 200 (after being converted)?"

STARTANSWER
# The digits of 200 in base 2 is the sequence:
digits_a = digits(200, 2)
# The digits of 1200 in base 2 is the sequence:
digits_b = digits(1200, 2)
# Find the difference in lengths
goal = len(digits_b) - len(digits_a)
ENDCODE

[BLOCK] ntheory seqs or graphs
### Statement
"Find the smallest four-digit palindrome which is the square of another palindrome."

STARTANSWER
# Define a function to check if the digits of a number are the same forwards and backwards
is_palindrome = Lambda(i, digits(i, 10) == reversed(digits(i, 10)))
# Let n be the four-digit palindrome
n : Int
len(digits(n, 10)) == 4
is_palindrome(n)
# n is a square of another palindrome, call it m
m : Int
n == m^2
# Find the smallest n
goal = min(n)
ENDCODE

[BLOCK] geometry
### Statement
"The angles of quadrilateral $ABCD$ satisfy $\angle A = 2\angle B = 3\angle C = 4\angle D$. What is the degree measure of $\angle A$, rounded to the nearest whole number?"

STARTANSWER
# Define the variables for the angles measured in degrees
A, B, C, D : Real
# The given relationship between the angles
A == 2 * B == 3 * C == 4 * D
# The sum of the angles in a quadrilateral is 360 degrees
sum(A, B, C, D) == 360
# Round A to an integer
goal = round(A)
ENDCODE

[BLOCK] comb seqs or prob
### Statement
"The Smith family has 4 sons and 3 daughters. In how many ways can they be seated in a row of 7 chairs such that at least 2 boys are next to each other?"

STARTANSWER
# The order of the sons and daughters doesn't matter, only whether each seat has a son or a daughter. Represent the seats as a list of 7 numbers
seats : Seq(Int, len = 7)
# Define seat labels 'son', 'daughter'
son = 0
daughter = 1
# Each seat has a son or daughter
ForAll([s in seats], s == son or s == daughter)
# There is an pair of adjacent seats i, i + 1 with sons
i : Int
seats[i] == son
seats[i + 1] == son
# The answer is the number of possible assignments to seats
goal = count(seats)
ENDCODE

[BLOCK]
### Statement
"PROBLEM"

STARTANSWER
